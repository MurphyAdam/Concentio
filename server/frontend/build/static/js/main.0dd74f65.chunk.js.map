{"version":3,"sources":["components/Header/NavBar.jsx","components/Header/Header.jsx","components/MusicPlayer.jsx","containers/Home.jsx","config/index.js","App.jsx","serviceWorker.js","index.jsx"],"names":["useStyles","makeStyles","theme","grow","flexGrow","margin","spacing","appBar","zIndex","Toolbar","title","fontSize","textTransform","breakpoints","up","display","PrimaryAppBar","props","classes","className","AppBar","position","variant","Typography","noWrap","Button","color","Header","NavBar","MusicPlayer","playlist","audioLists","autoPlay","autoHiddenCover","spaceBar","defaultPosition","left","bottom","card","cardDetails","flex","cardMedia","width","description","a","textDecoration","palette","secondary","main","defaultPlaylist","name","singer","cover","musicSrc","Home","useState","setPlaylist","useEffect","fetch","window","location","origin","then","response","json","data","error","catch","Fragment","Grid","item","xs","Card","CardContent","gutterBottom","paragraph","CardMedia","image","href","target","rel","IconButton","component","aria-label","config","defaultPaletteColors","primary","light","dark","root","marginTop","marginLeft","marginRight","App","createMuiTheme","type","contrastThreshold","tonalOffset","typography","CssBaseline","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"iQAOMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,OAAQH,EAAMI,QAAQ,IAExBC,OAAQ,CACNC,OAAQ,KAEVC,QAAS,CACPD,OAAQ,KAEVE,MAAM,aACJC,SAAU,GACVC,cAAe,QACdV,EAAMW,YAAYC,GAAG,MAAQ,CAC5BC,QAAS,cA4BAC,MAvBf,SAAuBC,GAErB,IAAMC,EAAUlB,IAEhB,OACE,yBAAKmB,UAAWD,EAAQf,MACtB,kBAACiB,EAAA,EAAD,CAAQC,SAAS,QAAQF,UAAWD,EAAQX,QAC1C,kBAACE,EAAA,EAAD,CAASa,QAAQ,QAAQH,UAAWD,EAAQT,SAC1C,kBAACc,EAAA,EAAD,CAAYD,QAAQ,KAAKE,QAAM,GAC3B,kBAACC,EAAA,EAAD,CACEC,MAAM,UACNJ,QAAQ,OACRH,UAAWD,EAAQR,OAHrB,cAOJ,yBAAKS,UAAWD,EAAQf,WCxCnB,SAASwB,IACtB,OACI,gCACE,kBAACC,EAAD,O,+BCmBOC,G,OArBK,SAACZ,GAAU,IAOtBa,EAPsB,eAOLb,GAAjBa,SAIR,OACC,kBAAC,IAAD,CAAoBC,WAAYD,EAC/BE,UAAU,EACVC,iBAAiB,EACjBC,UAAU,EACVC,gBAAiB,CAACC,KAAM,EAAGC,OAAQ,O,4GCNzBrC,EAAYC,aAAW,SAACC,GAAD,MAAY,CAC9CoC,KAAM,CACJvB,QAAS,OACTV,OAAQH,EAAMI,QAAQ,IAExBiC,YAAa,CACXC,KAAM,GAERC,UAAW,CACTC,MAAO,KAETC,YAAa,CACZtC,OAAQH,EAAMI,QAAQ,EAAG,IAE1BsC,EAAG,CACDC,eAAgB,OAChBnB,MAAOxB,EAAM4C,QAAQC,UAAUC,UAI7BC,EAAkB,CACtB,CACEC,KAAM,eACNC,OAAQ,gBACRC,MACE,wFACFC,SACE,yHAEJ,CACEH,KAAM,cACNC,OAAQ,cACRE,SACE,8FAEJ,CACEH,KAAM,gBACNC,OAAQ,gBACRC,MACE,kFACFC,SACE,oGAqHSC,EAjHF,SAACrC,GAEb,IAAMC,EAAUlB,IAFO,EAGUuD,mBAAS,IAHnB,mBAGfzB,EAHe,KAGL0B,EAHK,KAqBvB,OAdCC,qBAAU,WACRC,MAAM,GAAD,OAAIC,OAAOC,SAASC,OAApB,kBACJC,MAAK,SAAAC,GACFA,EAASC,OAAOF,MAAK,SAAAG,GAClBA,EAAKC,MAAOV,EAAYP,GAClBgB,EAAKnC,SAAU0B,EAAYS,EAAKnC,UACpC0B,EAAYP,SAGpBkB,OAAM,SAAAD,GACLV,EAAYP,QAEb,IAGH,kBAAC,IAAMmB,SAAP,KACI,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CAAMrD,UAAWD,EAAQoB,MACvB,yBAAKnB,UAAWD,EAAQqB,aACtB,kBAACkC,EAAA,EAAD,KACE,kBAAClD,EAAA,EAAD,CACED,QAAQ,KACRoD,cAAY,GAFd,sDAOA,kBAACnD,EAAA,EAAD,CACED,QAAQ,YACRI,MAAM,gBACNiD,WAAS,GAHX,+DAQJ,kBAACC,EAAA,EAAD,CACEzD,UAAWD,EAAQuB,UACnBoC,MAAM,6FACNnE,MAAM,gBAIZ,kBAAC2D,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAAChD,EAAA,EAAD,CACED,QAAQ,YACRI,MAAM,gBACNP,UAAWD,EAAQyB,YACnBgC,WAAS,GAJX,mIAOE,uBAAGG,KAAK,gCACNC,OAAO,SACPC,IAAI,sBACJ7D,UAAWD,EAAQ0B,GAHrB,oCAMF,kBAACqC,EAAA,EAAD,CACCC,UAAU,IACTxE,MAAM,SACNyE,aAAW,SACXzD,MAAM,UACNoD,KAAK,gCACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CACCC,UAAU,IACTxE,MAAM,cACNyE,aAAW,cACXzD,MAAM,UACNoD,KAAK,0CACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CACCC,UAAU,IACTxE,MAAM,WACNyE,aAAW,WACXzD,MAAM,UACNoD,KAAK,uDACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CACCC,UAAU,IACTxE,MAAM,QACNyE,aAAW,QACXzD,MAAM,UACNoD,KAAK,+BACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,QAGP,kBAAC,EAAD,CAAalD,SAAUA,M,kBCxJXsD,EAfA,CACbC,qBAAsB,CACpBC,QAAS,CACPC,MAAO,UACPvC,KAAM,UACNwC,KAAM,WAERzC,UAAW,CACTwC,MAAO,UACPvC,KAAM,UACNwC,KAAM,aCFNxF,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCuF,KAAK,aACH/C,MAAO,OACPgD,UAAWxF,EAAMI,QAAQ,IACzBqF,WAAYzF,EAAMI,QAAQ,GAC1BsF,YAAa1F,EAAMI,QAAQ,IAC1BJ,EAAMW,YAAYC,GAAG,KAAOZ,EAAMI,QAAQ,IAAU,CACnDoC,MAAO,KACPiD,WAAY,OACZC,YAAa,aAgCJC,MA3Bf,WAEE,IAAM3E,EAAUlB,IACVE,EAAQ4F,YAAe,CAC3BhD,QAAS,CACPiD,KAAM,OACNT,QAASF,EAAOC,qBAAqBC,QACrCvC,UAAWqC,EAAOC,qBAAqBtC,UACvCiD,kBAAmB,EACnBC,YAAa,IAEfC,WAAY,CACVvF,SAAU,MAId,OACE,kBAAC,IAAD,CAAkBT,MAAOA,GACvB,kBAACiG,EAAA,EAAD,MACA,kBAAC9B,EAAA,EAAD,CAAMa,UAAU,OAAO/D,UAAWD,EAAQuE,MACxC,kBAAC9D,EAAD,MACA,kBAAC,EAAD,SC/BYyE,QACW,cAA7BzC,OAAOC,SAASyC,UAEe,UAA7B1C,OAAOC,SAASyC,UAEhB1C,OAAOC,SAASyC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd5C,OAAM,SAAAD,GACL8C,QAAQ9C,MAAMA,EAAM+C,c","file":"static/js/main.0dd74f65.chunk.js","sourcesContent":["import React from 'react';\nimport {makeStyles} from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  grow: {\n    flexGrow: 1,\n    margin: theme.spacing(0),\n  },\n  appBar: {\n    zIndex: 200,\n  },\n  Toolbar: {\n    zIndex: 200,\n  },\n  title: {\n    fontSize: 15,\n    textTransform: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  }\n}));\n\nfunction PrimaryAppBar(props) {\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.grow}>\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar variant=\"dense\" className={classes.Toolbar}>\n          <Typography variant=\"h4\" noWrap>\n              <Button \n                color=\"inherit\" \n                variant=\"text\"\n                className={classes.title}>\n                  Concentio\n              </Button>\n          </Typography>\n          <div className={classes.grow} />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default PrimaryAppBar;","import React from 'react';\nimport NavBar from './NavBar';\n\nexport default function Header () {\n  return (\n      <header>\n        <NavBar />\n      </header>\n    )\n}\n","import React from 'react'\nimport ReactJkMusicPlayer from 'react-jinke-music-player'\nimport 'react-jinke-music-player/assets/index.css'\n\nconst MusicPlayer = (props) => {\n\n\t// ReactJkMusicPlayer component expects a playlist, and so we are getting \n\t// our playlist as a prop from the Home component, which first makes a GET \n\t// request to the server to get a custom playlist defined by your own liking, \n\t// if a playlist is returned from the server, it is used, otherwise the default \n\t// playlist defined in Home is used.\n\tconst { playlist } = {...props};\n\n\t// Read ReactJkMusicPlayer package docs to learn more about the \n\t// available props\n\treturn (\n\t\t<ReactJkMusicPlayer audioLists={playlist}\n\t\t\tautoPlay={false}\n\t\t\tautoHiddenCover={true}\n\t\t\tspaceBar={true}\n\t\t\tdefaultPosition={{left: 0, bottom: 0}}\n\t\t\t/>\n\t\t);\n}\n\nexport default MusicPlayer;\n","import React, { useState, useEffect } from 'react';\nimport MusicPlayer from '../components/MusicPlayer';\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from '@material-ui/core';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport MailIcon from '@material-ui/icons/Mail';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport CodeIcon from '@material-ui/icons/Code';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const useStyles = makeStyles((theme) => ({\n  card: {\n    display: \"flex\",\n    margin: theme.spacing(1)\n  },\n  cardDetails: {\n    flex: 1\n  },\n  cardMedia: {\n    width: 160,\n  },\n  description: {\n  \tmargin: theme.spacing(0, 2)\n  },\n  a: {\n    textDecoration: 'none',\n    color: theme.palette.secondary.main\n  }\n}));\n\nconst defaultPlaylist = [\n  {\n    name: 'Gotta Get Up',\n    singer: 'Harry Nilsson',\n    cover:\n      'https://res.cloudinary.com/lang-code/image/upload/v1599213505/gotta_get_up_ilmg8w.jpg',\n    musicSrc:\n      'https://res.cloudinary.com/lang-code/video/upload/v1599213151/Harry_Nilsson_-_Gotta_Get_Up__Official_Audio_t9jftf.mp3',\n  },\n  {\n    name: 'Burning Sky',\n    singer: 'Bad Company',\n    musicSrc:\n      'https://res.cloudinary.com/lang-code/video/upload/v1599214523/01_20Burnin_20Sky_epzvsn.mp3',\n  },\n  {\n    name: 'Prism of life',\n    singer: 'Prism of life',\n    cover:\n      'https://res.cloudinary.com/lang-code/image/upload/v1599214158/presim_jlzurz.jpg',\n    musicSrc:\n      'https://res.cloudinary.com/lang-code/video/upload/v1599214125/11_20Prism_20of_20Life_bzmbwu.mp3',\n  },\n];\n\nconst Home = (props) => {\n\t\n\tconst classes = useStyles();\n  const [playlist, setPlaylist] = useState([]);\n\n  // the below hook is only rendered once, thus '[]' dependecy array,\n  // see MusicPlayer component for description.\n  useEffect(() => {\n    fetch(`${window.location.origin}/api/playlist`)\n    .then(response => {\n        response.json().then(data => {\n        if(data.error) setPlaylist(defaultPlaylist);\n        else if (data.playlist) setPlaylist(data.playlist);\n        else setPlaylist(defaultPlaylist);\n      })\n    })\n    .catch(error => {\n      setPlaylist(defaultPlaylist);\n    });\n  }, [])\n\n\treturn (\n\t\t<React.Fragment>\n      <Grid item xs={12}>\n        <Card className={classes.card}>\n          <div className={classes.cardDetails}>\n            <CardContent>\n              <Typography \n                variant=\"h5\" \n                gutterBottom\n              >\n                Concentio, enjoy the simplicity, enjoy your music.\n              </Typography>\n              \n              <Typography \n                variant=\"subtitle2\" \n                color=\"textSecondary\"\n                paragraph>\n                A light, simple and straight-forward music streaming app.\n              </Typography>\n            </CardContent>\n          </div>\n          <CardMedia\n            className={classes.cardMedia}\n            image=\"https://res.cloudinary.com/lang-code/image/upload/v1599217214/images/music_icon_tkqdsq.png\"\n            title=\"Concentio\"\n          />\n        </Card>\n      </Grid>\n      <Grid item xs={12}>\n        <Typography \n          variant=\"subtitle2\" \n          color=\"textSecondary\"\n          className={classes.description}\n          paragraph>\n          Minimalistic music streaming app built with React + Material-UI, and served with Flask. Star, \n          fork or contribute if you wish so. \n          <a href=\"https://github.com/MurphyAdam\" \n            target=\"_blank\"\n            rel=\"noopener noreferrer\" \n            className={classes.a}> By: @GitHub/MurphyAdam (Majdi)\n          </a>\n        </Typography>\n        <IconButton \n        \tcomponent=\"a\"\n          title=\"GitHub\" \n          aria-label=\"GitHub\" \n          color=\"inherit\"\n          href=\"https://github.com/MurphyAdam\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          >\n          <GitHubIcon />\n        </IconButton>\n        <IconButton \n        \tcomponent=\"a\"\n          title=\"Source code\" \n          aria-label=\"Source code\" \n          color=\"inherit\"\n          href=\"https://github.com/MurphyAdam/Concentio\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          >\n          <CodeIcon />\n        </IconButton>\n        <IconButton \n        \tcomponent=\"a\"\n          title=\"LinkedIn\" \n          aria-label=\"LinkedIn\" \n          color=\"inherit\"\n          href=\"https://www.linkedin.com/in/mahfoud-majidi-258461198\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          >\n          <LinkedInIcon />\n        </IconButton>\n        <IconButton \n        \tcomponent=\"a\"\n          title=\"Email\" \n          aria-label=\"Email\" \n          color=\"inherit\"\n          href=\"mailto:langandcode@gmail.com\" \n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          >\n          <MailIcon />\n        </IconButton>\n      </Grid>\n\t\t\t<MusicPlayer playlist={playlist}/>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default Home;","const config = {\n  defaultPaletteColors: {\n    primary: {\n      light: '#484848',\n      main: '#212121',\n      dark: '#000000',\n    },\n    secondary: {\n      light: '#ffff6e',\n      main: '#009688',\n      dark: '#009692',\n    },\n  },\n}\n\nexport default config;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Header from './components/Header/Header';\nimport Home from './containers/Home';\nimport { MuiThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport config from './config';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"auto\",\n    marginTop: theme.spacing(10),\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    [theme.breakpoints.up(1100 + theme.spacing(3 * 2))]: {\n      width: 1100,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    }\n  },\n}));\n\nfunction App() {\n\n  const classes = useStyles();\n  const theme = createMuiTheme({\n    palette: {\n      type: 'dark',\n      primary: config.defaultPaletteColors.primary,\n      secondary: config.defaultPaletteColors.secondary,\n      contrastThreshold: 3,\n      tonalOffset: 0.2,\n    },\n    typography: {\n      fontSize: 14,\n    },\n  });\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Grid component=\"main\" className={classes.root}>\n        <Header />\n        <Home />\n      </Grid>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}